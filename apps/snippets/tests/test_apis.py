"""
Test APIs in snippets app.
"""

from django.forms.models import model_to_dict

from rest_framework import status
from rest_framework.test import APITestCase

from apps.snippets.models import Snippet
from apps.snippets.serializers import UserSerializer, SnippetSerializer
from .mixins import CreateTestSnippetMixin, APITestRequiredMixin


class GetAndRetrieveSnippetTests(CreateTestSnippetMixin,
                                 APITestRequiredMixin,
                                 APITestCase):
    """
    Test APIs of snippets app: GET, RETRIEVE
    """

    def setUp(self) -> None:
        self._create_test_snippet()
        self._set_required_config_to_api_call()

    def test_get_snippets(self) -> None:
        url = '/snippets/'
        response = self.client.get(url, format='json')

        # Response check
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.json()['count'], 1)

        # Serialized result check
        snippets = Snippet.objects.all()
        serializer = SnippetSerializer(snippets, many=True, context={'request': self.factory.get(url)})
        self.assertEqual(response.json()['results'], serializer.data)

    def test_get_snippet(self) -> None:
        snippet = Snippet.objects.filter(title__contains=self.title).first()
        url = f'/snippets/{snippet.id}/'
        response = self.client.get(url, format='json')

        # Response check
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['code'], self.code)

        # Serialized result check
        serializer = SnippetSerializer(snippet, context={'request': self.factory.get(url)})
        self.assertEqual(response.data, serializer.data)


class RetrieveHighlightedCodeTest(CreateTestSnippetMixin,
                                  APITestRequiredMixin,
                                  APITestCase):
    """
    Test APIs of snippets app: GET Highlighted
    """

    def setUp(self) -> None:
        self._create_test_snippet()
        self._set_required_config_to_api_call()

    def test_highlighted_code(self) -> None:
        snippet = Snippet.objects.filter(title__contains=self.title).first()
        url = f'/snippets/{snippet.id}/highlight/'
        response = self.client.get(url, format='json')

        # Response check
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIn('text/html', response.headers['Content-Type'])
        self.assertIn('<https://pygments.org/>', response.data)  # Check highlighted page source generated by Pygments


class CreateAndPutSnippetTests(CreateTestSnippetMixin,
                               APITestRequiredMixin,
                               APITestCase):
    """
    Test APIs of snippets app: CREATE, PUT
    """

    def setUp(self) -> None:
        self._create_test_snippet()
        self._set_required_config_to_api_call()
        self.new_data = {
            'title': 'My test snippet 02',
            'code': 'print("Hi, this is test code 02!!")',
            'linenos': True,
        }

    def test_create_snippet(self) -> None:
        url = f'/snippets/'
        response = self.client.post(url, data=self.new_data, format='json')

        # Response check
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        # Serialized result check
        snippet = Snippet.objects.get(id=response.data['id'])
        serializer = SnippetSerializer(snippet, context={
            'request': self.factory.get(f'{url}/{response.data["id"]}/')
        })
        self.assertEqual(response.data, serializer.data)

    def test_put_snippet(self) -> None:
        snippet = Snippet.objects.filter(title__contains=self.title).first()
        url = f'/snippets/{snippet.id}/'
        response = self.client.put(url, data={
            **model_to_dict(snippet),
            'title': f'(Updated) {snippet.title}',  # Update target
            'code': f'(Modified) {snippet.code}',  # Update target
        }, format='json')

        # Response check
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIn('(Updated)', response.data['title'])
        self.assertIn('(Modified)', response.data['code'])

        # Serialized result check
        updated_snippet = Snippet.objects.get(id=response.data['id'])
        serializer = SnippetSerializer(updated_snippet, context={
            'request': self.factory.get(f'{url}/{response.data["id"]}/')
        })
        self.assertEqual(response.data, serializer.data)

        # Highlighted code check
        highlighted_response = self.client.get(f'{url}highlight/')
        self.assertEqual(highlighted_response.status_code, status.HTTP_200_OK)
        self.assertIn('text/html', highlighted_response.headers['Content-Type'])
        self.assertIn('Modified</span>', highlighted_response.data)


class DeleteSnippetTest(CreateTestSnippetMixin,
                        APITestRequiredMixin,
                        APITestCase):
    """
    Test APIs of snippets app: DELETE
    """

    def setUp(self) -> None:
        self._create_test_snippet()
        self._set_required_config_to_api_call()

    def test_delete_snippet(self) -> None:
        snippet = Snippet.objects.filter(title__contains=self.title).first()
        url = f'/snippets/{snippet.id}/'
        response = self.client.delete(url, format='json')

        # Response and Result check
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(self.client.get(url, format='json').status_code, status.HTTP_404_NOT_FOUND)
